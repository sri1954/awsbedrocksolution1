@page "/chat"
@using CoreApp.Models
@using CoreApp.Services
@inject AwsChatService ChatService
@inject AwsEmbeddingService EmbeddingService
@inject AwsVectorStoreService VectorStoreService
@inject AIAppSettings AppSettings
@rendermode InteractiveServer

<h3>AI Chat</h3>

<div class="chat-container">
    <div class="chat-messages" @ref="chatScrollRef">
        @foreach (var msg in messages)
        {
            <div class="chat-message @msg.Role">
                <div class="bubble">@msg.Content</div>
            </div>
        }
    </div>

    <div class="chat-input-bar">
        <input type="text"
               @bind="userInput"
               @bind:event="oninput"
               @onkeydown="HandleKeyDown"
               placeholder="Type a message..."
               class="chat-input" />

        <button @onclick="SendMessage" class="chat-send-button">
            <span class="material-icons">send</span>
        </button>
    </div>
</div>

@code {
    private string userInput = "";
    private List<ChatMessage> messages = new();
    private ElementReference chatScrollRef;
    private string? bucketName;
    private string? indexName;

    protected override void OnInitialized()
    {
        bucketName = AppSettings.BucketName!;
        indexName = AppSettings.IndexName!;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput)) return;

        messages.Add(new ChatMessage { Role = "user", Content = userInput });

        var embedding = await EmbeddingService.GenerateEmbeddingAsync(userInput);
        var relatedDocs = await VectorStoreService.QueryEmbeddingAsync(bucketName, indexName, embedding);

        if (relatedDocs.Any())
        {
            messages.Add(new ChatMessage { Role = "assistant", Content = $"📚 Related documents:\n{string.Join("\n", relatedDocs)}" });
        }

        var response = await ChatService.GetResponseAsync(messages);
        messages.Add(new ChatMessage { Role = "assistant", Content = response });

        userInput = "";
        StateHasChanged(); // Refresh UI

        userInput = "";
        await ScrollToBottom();

    }


    private async Task ScrollToBottom()
    {
        await Task.Delay(100); // wait for UI to update
        await chatScrollRef.FocusAsync(); // triggers scroll
    }

}
