@page "/chat"
@using CoreApp.Models
@using CoreApp.Services
@using Markdig
@using Microsoft.AspNetCore.Components.Web
@inject AwsChatService ChatService
@inject AwsEmbeddingService EmbeddingService
@inject AwsVectorStoreService VectorStoreService
@inject GlobalState GlobalState
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3 class="text-xl font-bold mb-3">AI Chat</h3>

<div class="chat-container">
    <!-- Messages -->
    <div class="chat-messages">
        @foreach (var msg in messages)
        {
            <div class="chat-message @msg.Role">
                <div class="bubble">@((MarkupString)Markdown.ToHtml(msg.Content ?? string.Empty))</div>
            </div>
        }
        <div @ref="chatEndRef"></div>
    </div>

    <!-- Input bar -->
    <div class="chat-input-bar">
        <input type="text"
               @bind="userInput"
               @bind:event="oninput"
               @onkeydown="HandleKeyDown"
               placeholder="Type a message..."
               class="chat-input" />

        <button @onclick="SendMessage" class="chat-send-button">
            <span class="material-icons">send</span>
        </button>
    </div>
</div>

@code {
    private string userInput = "";
    private List<ChatMessage> messages = new();
    private ElementReference chatEndRef;
    private string? bucketName;
    private string? indexName;
    private float threshold = 0.3f;

    protected override void OnInitialized()
    {
        bucketName = GlobalState.CurrentBucket;
        indexName = GlobalState.CurrentIndex;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await SendMessage();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput)) return;

        // Add user message
        messages.Add(new ChatMessage { Role = "user", Content = userInput });

        // Generate embedding and query vector store
        var embedding = await EmbeddingService.GenerateEmbeddingAsync(userInput);
        var relatedDocs = await VectorStoreService.QueryEmbeddingAsync(bucketName!, indexName!, embedding);

        var highConfidenceDocs = relatedDocs
            .Where(r => r.Score >= threshold)
            .ToList();

        if (highConfidenceDocs.Any())
        {
            messages.Add(new ChatMessage
            {
                Role = "assistant",
                Content = $"### 📚 Related Documents\n\n" +
                          string.Join("\n", highConfidenceDocs.Select(d => $"- {d.Document} (score: {d.Score:F2})"))
            });
        }
        else
        {
            messages.Add(new ChatMessage
            {
                Role = "assistant",
                Content = "❌ Not found in related documents (all results below threshold)."
            });
        }

        // AI model response
        var response = await ChatService.GetResponseAsync(messages);
        messages.Add(new ChatMessage { Role = "assistant", Content = response });

        userInput = "";
        StateHasChanged();

        // Auto-scroll
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50); // wait for UI render
        await JS.InvokeVoidAsync("scrollToBottom", chatEndRef);
    }
}
